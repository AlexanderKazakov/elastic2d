#include <gtest/gtest.h>

#include <libgcm/grid/simplex/mesh_loaders/InmMeshLoader.hpp>
#include <libgcm/util/snapshot/VtkSnapshotter.hpp>

using namespace gcm;

/*
TEST(InmMeshLoader, load) {
	Task task;
	task.cgal3DGrid.mesher = Task::Cgal3DGrid::Mesher::INM_MESHER;
	task.cgal3DGrid.fileName = "meshes/coarse/mesh-coarse.out";
//	task.cgal3DGrid.fileName = "meshes/refined/mesh-refined.out";
	Cgal3DGrid grid(task);
	VtkUtils::dumpGridToVtk(grid);
}
*/

TEST(InmMeshLoader, readFromFile) {
	std::vector<Real3> points;
	std::map<InmMeshLoader::Cell, InmMeshLoader::Material> materials;
	
	InmMeshLoader::readFromFile("meshes/coarse/testInmLoader.out", 
			points, materials);
	
	ASSERT_EQ(12, points.size());
	ASSERT_EQ(3, materials.size());
	
	ASSERT_NEAR(-2.583210754394531250e+01, points[3 ](0), EQUALITY_TOLERANCE);
	ASSERT_NEAR( 2.400143432617187500e+01, points[4 ](0), EQUALITY_TOLERANCE);
	ASSERT_NEAR( 2.306465148925781250e+01, points[5 ](0), EQUALITY_TOLERANCE);
	ASSERT_NEAR( 2.364865112304687500e+01, points[6 ](0), EQUALITY_TOLERANCE);
	ASSERT_NEAR( 2.377413177490234375e+01, points[7 ](0), EQUALITY_TOLERANCE);
	ASSERT_NEAR(-7.073544311523437500e+01, points[8 ](0), EQUALITY_TOLERANCE);
	ASSERT_NEAR(-6.941218566894531250e+01, points[9 ](0), EQUALITY_TOLERANCE);
	ASSERT_NEAR(-6.654748535156250000e+01, points[10](0), EQUALITY_TOLERANCE);
	ASSERT_NEAR(-6.843022155761718750e+01, points[11](0), EQUALITY_TOLERANCE);
	
	ASSERT_NEAR( 4.283624267578125000e+01, points[0 ](1), EQUALITY_TOLERANCE);
	ASSERT_NEAR( 4.416368865966796875e+01, points[1 ](1), EQUALITY_TOLERANCE);
	ASSERT_NEAR( 4.302170562744140625e+01, points[2 ](1), EQUALITY_TOLERANCE);
	ASSERT_NEAR( 4.141203308105468750e+01, points[3 ](1), EQUALITY_TOLERANCE);
	ASSERT_NEAR( 1.096292877197265625e+01, points[4 ](1), EQUALITY_TOLERANCE);
	ASSERT_NEAR( 1.127018737792968750e+01, points[5 ](1), EQUALITY_TOLERANCE);
	ASSERT_NEAR( 1.141680145263671875e+01, points[6 ](1), EQUALITY_TOLERANCE);
	ASSERT_NEAR( 1.079985809326171875e+01, points[7 ](1), EQUALITY_TOLERANCE);
	ASSERT_NEAR( 3.833699035644531250e+01, points[8 ](1), EQUALITY_TOLERANCE);
	ASSERT_NEAR( 4.111538696289062500e+01, points[9 ](1), EQUALITY_TOLERANCE);
	ASSERT_NEAR( 4.088376617431640625e+01, points[10](1), EQUALITY_TOLERANCE);
	ASSERT_NEAR( 3.788503265380859375e+01, points[11](1), EQUALITY_TOLERANCE);
	
	ASSERT_NEAR( 1.406894775390625000e+03, points[0 ](2), EQUALITY_TOLERANCE);
	ASSERT_NEAR( 1.404953125000000000e+03, points[1 ](2), EQUALITY_TOLERANCE);
	ASSERT_NEAR( 1.405088378906250000e+03, points[2 ](2), EQUALITY_TOLERANCE);
	ASSERT_NEAR( 1.405093261718750000e+03, points[3 ](2), EQUALITY_TOLERANCE);
	ASSERT_NEAR( 1.388465698242187500e+03, points[4 ](2), EQUALITY_TOLERANCE);
	ASSERT_NEAR( 1.388329711914062500e+03, points[5 ](2), EQUALITY_TOLERANCE);
	ASSERT_NEAR( 1.388676269531250000e+03, points[6 ](2), EQUALITY_TOLERANCE);
	ASSERT_NEAR( 1.387921020507812500e+03, points[7 ](2), EQUALITY_TOLERANCE);
	ASSERT_NEAR( 1.369011962890625000e+03, points[8 ](2), EQUALITY_TOLERANCE);
	ASSERT_NEAR( 1.365369384765625000e+03, points[9 ](2), EQUALITY_TOLERANCE);
	ASSERT_NEAR( 1.370376220703125000e+03, points[10](2), EQUALITY_TOLERANCE);
	ASSERT_NEAR( 1.366383422851562500e+03, points[11](2), EQUALITY_TOLERANCE);
	
	ASSERT_EQ(4, materials.at(InmMeshLoader::Cell({1, 2, 3, 4})));
	ASSERT_EQ(5, materials.at(InmMeshLoader::Cell({5, 6, 7, 8})));
	ASSERT_EQ(1, materials.at(InmMeshLoader::Cell({9, 10, 11, 12})));
}
